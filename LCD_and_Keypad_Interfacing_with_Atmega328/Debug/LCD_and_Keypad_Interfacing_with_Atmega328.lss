
LCD_and_Keypad_Interfacing_with_Atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000003dc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800130  00800130  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000128c  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009df  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000848  00000000  00000000  0000221b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000841  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000038b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  9e:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <keypad_init>:
unsigned char colloc, rowloc;
unsigned char keypad[4][4] = {{'7', '8', '9', '/'}, {'4', '5', '6', '*'}, {'1', '2', '3', '-'}, {'.', '0', '=', '+'}};

void keypad_init(void)
{
	KEY_DDR = 0x0F; // set first four pins in the port to output (D0-D3) and the last four pins to input (D4-D7)
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 b9       	out	0x04, r24	; 4
	KEY_PRT = 0xF0; // activate pull up on input pins
  aa:	80 ef       	ldi	r24, 0xF0	; 240
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	08 95       	ret

000000b0 <keypad_get_key>:

unsigned char keypad_get_key(void)
{
	do
	{
		KEY_PRT = 0xF0;			 // ground all rows
  b0:	90 ef       	ldi	r25, 0xF0	; 240
  b2:	95 b9       	out	0x05, r25	; 5
		colloc = KEY_PIN & 0xF0; // read all columns
  b4:	83 b1       	in	r24, 0x03	; 3
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
	} while (colloc != 0xF0);	// check until all keys released
  bc:	80 3f       	cpi	r24, 0xF0	; 240
  be:	c9 f7       	brne	.-14     	; 0xb2 <keypad_get_key+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	87 e8       	ldi	r24, 0x87	; 135
  c2:	93 e1       	ldi	r25, 0x13	; 19
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <keypad_get_key+0x14>
  c8:	00 c0       	rjmp	.+0      	; 0xca <keypad_get_key+0x1a>
  ca:	00 00       	nop
	do
	{
		do
		{
			_delay_ms(20);			 // wait
			colloc = KEY_PIN & 0xF0; // read all columns
  cc:	83 b1       	in	r24, 0x03	; 3
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
		} while (colloc == 0xF0);	// check until any key pressed
  d4:	80 3f       	cpi	r24, 0xF0	; 240
  d6:	a1 f3       	breq	.-24     	; 0xc0 <keypad_get_key+0x10>
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	93 e1       	ldi	r25, 0x13	; 19
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <keypad_get_key+0x2c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <keypad_get_key+0x32>
  e2:	00 00       	nop
		_delay_ms(20);				 // wait for debouncing
		colloc = KEY_PIN & 0xF0;	 // read all columns
  e4:	83 b1       	in	r24, 0x03	; 3
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
	} while (colloc == 0xF0);
  ec:	80 3f       	cpi	r24, 0xF0	; 240
  ee:	41 f3       	breq	.-48     	; 0xc0 <keypad_get_key+0x10>
	// row detection
	unsigned char ground = 0xFE;
	for (unsigned char i = 0; i < 4; i++)
	{
		KEY_PRT = ground;		 // ground row no. i
  f0:	8e ef       	ldi	r24, 0xFE	; 254
  f2:	85 b9       	out	0x05, r24	; 5
		colloc = KEY_PIN & 0xF0; // read all columns
  f4:	83 b1       	in	r24, 0x03	; 3
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
		if (colloc != 0xF0)
  fc:	80 3f       	cpi	r24, 0xF0	; 240
  fe:	61 f4       	brne	.+24     	; 0x118 <keypad_get_key+0x68>
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	2e ef       	ldi	r18, 0xFE	; 254
 104:	82 2f       	mov	r24, r18
 106:	89 1b       	sub	r24, r25
	} while (colloc == 0xF0);
	// row detection
	unsigned char ground = 0xFE;
	for (unsigned char i = 0; i < 4; i++)
	{
		KEY_PRT = ground;		 // ground row no. i
 108:	85 b9       	out	0x05, r24	; 5
		colloc = KEY_PIN & 0xF0; // read all columns
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
		if (colloc != 0xF0)
 112:	80 3f       	cpi	r24, 0xF0	; 240
 114:	89 f0       	breq	.+34     	; 0x138 <keypad_get_key+0x88>
 116:	01 c0       	rjmp	.+2      	; 0x11a <keypad_get_key+0x6a>
 118:	90 e0       	ldi	r25, 0x00	; 0
		{
			rowloc = i;
 11a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rowloc>
		{
			ground -= 1;
		}
	}
	// column detection
	switch (colloc)
 11e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 122:	80 3b       	cpi	r24, 0xB0	; 176
 124:	21 f1       	breq	.+72     	; 0x16e <keypad_get_key+0xbe>
 126:	18 f4       	brcc	.+6      	; 0x12e <keypad_get_key+0x7e>
 128:	80 37       	cpi	r24, 0x70	; 112
 12a:	61 f1       	breq	.+88     	; 0x184 <keypad_get_key+0xd4>
 12c:	36 c0       	rjmp	.+108    	; 0x19a <keypad_get_key+0xea>
 12e:	80 3d       	cpi	r24, 0xD0	; 208
 130:	99 f0       	breq	.+38     	; 0x158 <keypad_get_key+0xa8>
 132:	80 3e       	cpi	r24, 0xE0	; 224
 134:	31 f0       	breq	.+12     	; 0x142 <keypad_get_key+0x92>
 136:	31 c0       	rjmp	.+98     	; 0x19a <keypad_get_key+0xea>
		_delay_ms(20);				 // wait for debouncing
		colloc = KEY_PIN & 0xF0;	 // read all columns
	} while (colloc == 0xF0);
	// row detection
	unsigned char ground = 0xFE;
	for (unsigned char i = 0; i < 4; i++)
 138:	9f 5f       	subi	r25, 0xFF	; 255
 13a:	94 30       	cpi	r25, 0x04	; 4
 13c:	19 f7       	brne	.-58     	; 0x104 <keypad_get_key+0x54>
		break;
	default:
		break;
	}

	return -1; // return -1 if failed to get key
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	08 95       	ret
	}
	// column detection
	switch (colloc)
	{
	case 0xE0:
		return keypad[rowloc][3];
 142:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <rowloc>
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	83 81       	ldd	r24, Z+3	; 0x03
 156:	08 95       	ret
		break;
	case 0xD0:
		return keypad[rowloc][2];
 158:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <rowloc>
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	82 81       	ldd	r24, Z+2	; 0x02
 16c:	08 95       	ret
		break;
	case 0xB0:
		return keypad[rowloc][1];
 16e:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <rowloc>
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	81 81       	ldd	r24, Z+1	; 0x01
 182:	08 95       	ret
		break;
	case 0x70:
		return keypad[rowloc][0];
 184:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <rowloc>
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	80 81       	ld	r24, Z
 198:	08 95       	ret
		break;
	default:
		break;
	}

	return -1; // return -1 if failed to get key
 19a:	8f ef       	ldi	r24, 0xFF	; 255
}
 19c:	08 95       	ret

0000019e <lcd_write_cmnd>:
{
	unsigned char lcd_matrix[2][16] = {{0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F},
									   {0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF}};
	lcd_write_cmnd(lcd_matrix[row][column]);
	_delay_us(100);
}
 19e:	98 2f       	mov	r25, r24
 1a0:	90 7f       	andi	r25, 0xF0	; 240
 1a2:	9b b9       	out	0x0b, r25	; 11
 1a4:	40 98       	cbi	0x08, 0	; 8
 1a6:	41 98       	cbi	0x08, 1	; 8
 1a8:	42 9a       	sbi	0x08, 2	; 8
 1aa:	92 e4       	ldi	r25, 0x42	; 66
 1ac:	9a 95       	dec	r25
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_write_cmnd+0xe>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_write_cmnd+0x14>
 1b2:	42 98       	cbi	0x08, 2	; 8
 1b4:	98 ec       	ldi	r25, 0xC8	; 200
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_write_cmnd+0x18>
 1ba:	82 95       	swap	r24
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	42 9a       	sbi	0x08, 2	; 8
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_write_cmnd+0x26>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_write_cmnd+0x2c>
 1ca:	42 98       	cbi	0x08, 2	; 8
 1cc:	98 ec       	ldi	r25, 0xC8	; 200
 1ce:	9a 95       	dec	r25
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_write_cmnd+0x30>
 1d2:	08 95       	ret

000001d4 <lcd_write_data>:
 1d4:	98 2f       	mov	r25, r24
 1d6:	90 7f       	andi	r25, 0xF0	; 240
 1d8:	9b b9       	out	0x0b, r25	; 11
 1da:	40 9a       	sbi	0x08, 0	; 8
 1dc:	41 98       	cbi	0x08, 1	; 8
 1de:	42 9a       	sbi	0x08, 2	; 8
 1e0:	90 e1       	ldi	r25, 0x10	; 16
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_write_data+0xe>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_write_data+0x14>
 1e8:	42 98       	cbi	0x08, 2	; 8
 1ea:	91 e2       	ldi	r25, 0x21	; 33
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_write_data+0x18>
 1f0:	00 00       	nop
 1f2:	82 95       	swap	r24
 1f4:	80 7f       	andi	r24, 0xF0	; 240
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	42 9a       	sbi	0x08, 2	; 8
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_write_data+0x28>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_write_data+0x2e>
 202:	42 98       	cbi	0x08, 2	; 8
 204:	91 e2       	ldi	r25, 0x21	; 33
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_write_data+0x32>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <lcd_init>:
 20e:	80 ef       	ldi	r24, 0xF0	; 240
 210:	8a b9       	out	0x0a, r24	; 10
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	87 b9       	out	0x07, r24	; 7
 216:	42 98       	cbi	0x08, 2	; 8
 218:	83 ef       	ldi	r24, 0xF3	; 243
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_init+0xe>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_init+0x14>
 222:	00 00       	nop
 224:	83 e3       	ldi	r24, 0x33	; 51
 226:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 23c:	81 ee       	ldi	r24, 0xE1	; 225
 23e:	94 e0       	ldi	r25, 0x04	; 4
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x32>
 244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_init+0x38>
 246:	00 00       	nop
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x44>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x4a>
 258:	00 00       	nop
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 260:	81 ee       	ldi	r24, 0xE1	; 225
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x56>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_init+0x5c>
 26a:	00 00       	nop
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 272:	81 ee       	ldi	r24, 0xE1	; 225
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x68>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_init+0x6e>
 27c:	00 00       	nop
 27e:	08 95       	ret

00000280 <lcd_cursor_setup>:
 280:	8e 30       	cpi	r24, 0x0E	; 14
 282:	29 f0       	breq	.+10     	; 0x28e <lcd_cursor_setup+0xe>
 284:	8f 30       	cpi	r24, 0x0F	; 15
 286:	59 f0       	breq	.+22     	; 0x29e <lcd_cursor_setup+0x1e>
 288:	8c 30       	cpi	r24, 0x0C	; 12
 28a:	61 f4       	brne	.+24     	; 0x2a4 <lcd_cursor_setup+0x24>
 28c:	04 c0       	rjmp	.+8      	; 0x296 <lcd_cursor_setup+0x16>
 28e:	8e e0       	ldi	r24, 0x0E	; 14
 290:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 294:	08 95       	ret
 296:	8c e0       	ldi	r24, 0x0C	; 12
 298:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 29c:	08 95       	ret
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 2a4:	08 95       	ret

000002a6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <lcd_gotoxy+0x6>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	unsigned char arr_address[] = {0x80, 0xC0};
 2b0:	90 e8       	ldi	r25, 0x80	; 128
 2b2:	99 83       	std	Y+1, r25	; 0x01
 2b4:	90 ec       	ldi	r25, 0xC0	; 192
 2b6:	9a 83       	std	Y+2, r25	; 0x02
	lcd_write_cmnd(arr_address[y - 1] + x - 1);
 2b8:	fe 01       	movw	r30, r28
 2ba:	e6 0f       	add	r30, r22
 2bc:	f1 1d       	adc	r31, r1
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	90 81       	ld	r25, Z
 2c2:	89 0f       	add	r24, r25
 2c4:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	81 e2       	ldi	r24, 0x21	; 33
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_gotoxy+0x24>
 2ce:	00 00       	nop
	_delay_us(100);
}
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <lcd_write_string>:

void lcd_write_string(char *str)
{
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	fc 01       	movw	r30, r24
	unsigned char index = 0;
	while (str[index] != 0)
 2e2:	80 81       	ld	r24, Z
 2e4:	88 23       	and	r24, r24
 2e6:	59 f0       	breq	.+22     	; 0x2fe <lcd_write_string+0x24>
 2e8:	8f 01       	movw	r16, r30
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_write_data(str[index]);
 2ec:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_write_data>
		index++;
 2f0:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_write_string(char *str)
{
	unsigned char index = 0;
	while (str[index] != 0)
 2f2:	f8 01       	movw	r30, r16
 2f4:	ec 0f       	add	r30, r28
 2f6:	f1 1d       	adc	r31, r1
 2f8:	80 81       	ld	r24, Z
 2fa:	81 11       	cpse	r24, r1
 2fc:	f7 cf       	rjmp	.-18     	; 0x2ec <lcd_write_string+0x12>
	{
		lcd_write_data(str[index]);
		index++;
	}
}
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <displayMyName>:
		}
	}
}

void displayMyName(void)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
	char *name = "Ahmed El-Torky";
	unsigned char index = 0;
	lcd_gotoxy(2, 2);
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	c0 e0       	ldi	r28, 0x00	; 0
	while (name[index] != 0)
	{
		lcd_write_data(name[index]);
 316:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_write_data>
		index++;
 31a:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	2f e9       	ldi	r18, 0x9F	; 159
 31e:	86 e8       	ldi	r24, 0x86	; 134
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <displayMyName+0x1c>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <displayMyName+0x26>
 32c:	00 00       	nop
void displayMyName(void)
{
	char *name = "Ahmed El-Torky";
	unsigned char index = 0;
	lcd_gotoxy(2, 2);
	while (name[index] != 0)
 32e:	ec 2f       	mov	r30, r28
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	e0 5f       	subi	r30, 0xF0	; 240
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	80 81       	ld	r24, Z
 338:	81 11       	cpse	r24, r1
 33a:	ed cf       	rjmp	.-38     	; 0x316 <displayMyName+0x10>
 33c:	c3 e0       	ldi	r28, 0x03	; 3
 33e:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(500);
	}

	for (int i = 0; i < 3; i++)
	{
		lcd_write_cmnd(LCD_CLEAR);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
		lcd_gotoxy(2, 2);
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
 34e:	8f e4       	ldi	r24, 0x4F	; 79
 350:	93 ec       	ldi	r25, 0xC3	; 195
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <displayMyName+0x4c>
 356:	00 c0       	rjmp	.+0      	; 0x358 <displayMyName+0x52>
 358:	00 00       	nop
		_delay_ms(200);
		lcd_write_string(name);
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_write_string>
 362:	8f e4       	ldi	r24, 0x4F	; 79
 364:	93 ec       	ldi	r25, 0xC3	; 195
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <displayMyName+0x60>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <displayMyName+0x66>
 36c:	00 00       	nop
 36e:	21 97       	sbiw	r28, 0x01	; 1
		lcd_write_data(name[index]);
		index++;
		_delay_ms(500);
	}

	for (int i = 0; i < 3; i++)
 370:	39 f7       	brne	.-50     	; 0x340 <displayMyName+0x3a>
		lcd_gotoxy(2, 2);
		_delay_ms(200);
		lcd_write_string(name);
		_delay_ms(200);
	}
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <main>:

void displayMyName(void);

int main(void)
{
	lcd_init();
 378:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_init>
	keypad_init();
 37c:	0e 94 53 00 	call	0xa6	; 0xa6 <keypad_init>
	lcd_cursor_setup(LCD_CURSOR_OFF); // disable the cursor
 380:	8c e0       	ldi	r24, 0x0C	; 12
 382:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cursor_setup>
	lcd_write_string("Hello 0123456789");
 386:	8f e1       	ldi	r24, 0x1F	; 31
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_write_string>
 38e:	2f e7       	ldi	r18, 0x7F	; 127
 390:	8a e1       	ldi	r24, 0x1A	; 26
 392:	96 e0       	ldi	r25, 0x06	; 6
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x1c>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x26>
 39e:	00 00       	nop
	_delay_ms(2000);
	lcd_write_cmnd(LCD_CLEAR);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
	displayMyName();
 3a6:	0e 94 83 01 	call	0x306	; 0x306 <displayMyName>
 3aa:	2f e9       	ldi	r18, 0x9F	; 159
 3ac:	86 e8       	ldi	r24, 0x86	; 134
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x38>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x42>
 3ba:	00 00       	nop
	_delay_ms(500);
	lcd_write_cmnd(LCD_CLEAR);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_cmnd>
 
	while (1)
	{
		unsigned char k = keypad_get_key();
 3c2:	0e 94 58 00 	call	0xb0	; 0xb0 <keypad_get_key>
		if (k != -1)
		{
			lcd_write_data(k);
 3c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_write_data>
 3ca:	87 ea       	ldi	r24, 0xA7	; 167
 3cc:	91 e6       	ldi	r25, 0x61	; 97
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x56>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x5c>
 3d4:	00 00       	nop
 3d6:	f5 cf       	rjmp	.-22     	; 0x3c2 <main+0x4a>

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
